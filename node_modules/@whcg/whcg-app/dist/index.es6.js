import '@polymer/polymer/lib/elements/custom-style.js';
import { PolymerElement, html } from "@polymer/polymer/polymer-element.js";
import "@polymer/polymer/lib/elements/dom-bind.js";
import "@polymer/polymer/lib/elements/dom-repeat.js";
import "@polymer/polymer/lib/elements/dom-if.js";
import '@whcg/whcg-general-styles/grid.js';
import "@whcg/whcg-box-container";
// import "@whcg/whcg-chart";
// import "@whcg/whcg-chart-feeder";
import "@whcg/whcg-grid";
import "@whcg/whcg-lit-grid";
// import "@whcg/whcg-button";
// import "@whcg/whcg-json-merger";
import "@whcg/whcg-login-check";
import "@whcg/whcg-login-fields";
// import "@whcg/whcg-select";
// import "@whcg/whcg-footer";
import "@vaadin/vaadin-grid";
import "@vaadin/vaadin-grid/vaadin-grid-selection-column.js";
import "@vaadin/vaadin-grid/vaadin-grid-column.js";
import "@vaadin/vaadin-grid/vaadin-grid-sorter.js";
import "@vaadin/vaadin-grid/vaadin-grid-filter.js";

import "@whcg/whcg-section-text-input";
import "@whcg/whcg-section-input-text";
import "@whcg/whcg-section-textlong-input-chart";
import "@whcg/whcg-section-textlong-chart-input";
import "@whcg/whcg-section-chart-text-inputlong";
import "@whcg/whcg-section-text-chart-inputlong";
import "@whcg/whcg-section-textlong-chartlong";
import "@whcg/whcg-section-wide-chartlong";

class WhcgApp extends PolymerElement {



    constructor() {
        super();
        this.db = new PouchDB('http://localhost:5984/statistics');
        this.brokerWorker = new Worker('../brokerworker.js');
        this.muniWorker = new Worker('../muniworker.js');
        this.contractdateWorker = new Worker('../contractdateworker.js');
        this.buildyearWorker = new Worker('../buildyearworker.js');
        this.maintableitems = [];
        this.brokertableitems = [];
        this.contractdatetableitems = [];
        this.buildyeartableitems = [];
        this.municipalitytableitems = [];
        this.selectedbrokers = [];
        this.selectedbrokersOld = [];
        this.selectedbuildyear = [];
        this.selectedbuildyearOld = [];
        this.selectedcontractdate = [];
        this.selectedcontractdateOld = [];
        this.selectedmuni = [];
        this.selectedmuniOld = [];
        this.selectedmain;
        this.arrIdsMuniOld = [];
        this.totalList = [];
        this.arrMunicipalityOld = [];
        this.arrIdsBrokersOld = [];
        this.arrBrokersOld = [];

        this.arrIdsBuildyearOld = [];
        this.arrBuildyearOld = [];

        this.arrIdsContractdateOld = [];
        this.arrContractdateOld = [];
        this.page = 0;
        //this.batch = 0;
        this.batch;
        this.showPrev = false;
    }

    static get observers() {
        return [
            '_itemsChanged(items, page)'
        ]
    }

    static get properties() {
    return {

        items: {
            type: Array,
            readOnly: false,
            notify: true,
            },

            showPrev: {
            type: Boolean,
            readOnly: false,
            notify: true,
            },

            batch: {
            type: Number,
            readOnly: false,
            notify: true,
            observer: '_batchBiggerThanZero'
            },
            page: {
            type: Number,
            readOnly: false,
            notify: true,
            },
            pages: {
            type: Array,
            readOnly: false,
            notify: true,
            },

        
        maintableitems: {
            type: Array,
            readOnly: false,
            notify: true,
            observer: '_maintableitemsChanged'
        },
        brokertableitems: {
            type: Array,
            readOnly: false,
            notify: true,
            observer: '_brokertableitemsChanged'
        },

        contractdatetableitems: {
            type: Array,
            readOnly: false,
            notify: true,
            observer: '_contractdatetableitemsChanged'
        },
        municipalitytableitems: {
            type: Array,
            readOnly: false,
            notify: true,
            observer: '_municipalitytableitemsChanged'
        },
        buildyeartableitems: {
            type: Array,
            readOnly: false,
            notify: true,
            observer: '_buildyeartableitemsChanged'
        },
        selectedmain: {
            type: Array,
            notify: true,
            readOnly: false,
            observer: '_selectedmainChanged'
        },
        selectedmuni: {
            type: Array,
            notify: true,
            readOnly: false,
            observer: '_selectedmuniChanged'
        },
        selectedbrokers: {
            type: Array,
            notify: true,
            readOnly: false,
            observer: '_selectedbrokersChanged'
        },
        selectedbuildyear: {
            type: Array,
            notify: true,
            readOnly: false,
            observer: '_selectedbuildyearChanged'
        },
        selectedcontractdate: {
            type: Array,
            notify: true,
            readOnly: false,
            observer: '_selectedcontractdateChanged'
        },
        selectedpage: {
            type: String,
            notify: true,
            readOnly: false,
            //observer: '_valueChangedinApp'
        },
        period: {
            type: String,
            notify: true,
            readOnly: false,
        }, 
    };
  }

  _isSelected(page, item) {

    while (item > 20) {
        item = item - 20;
    }

    return page === item - 1;
  }

  _select(e) {
      let item = e.model.item;
    while (item > 20) {
        item = item - 20;
    }

    this.page = item - 1;
  }

  _next() {
    this.page = Math.min(this.pages.length - 1, this.page + 1);
  }

  _batchBiggerThanZero() {

      if (this.batch > 0){
        this.showPrev = true;
      } else {
        this.showPrev = false; 
      }
    
}

_prevBatch() {
    let that = this;
    that.batch = that.batch - 20;
    this.pages = Array.apply(null, {length: Math.ceil(this.items.length / this.$.grid.pageSize)}).map(function(item, index) {
        return index + 1 + that.batch;
      });
   let subResult = [];

   async function grabIt(skip, limit, max) {
     let result = await that.db.find({
         selector: { 
           municipality: { $gte: null }
         },
         limit: limit,
         skip: skip
     });
 
     let sResult = subResult.concat(result.docs);
     subResult = sResult;

     max = max - limit;
 
     //if (limit => result.docs.length) {
     if (limit <= max) {
         grabIt(skip + 20, 20, max);
     } else {
        //that.maintableitems = subResult;
         that.items = subResult;
     }
   }

   grabIt(1 * that.batch * 20, 20, 100);
}


  _nextBatch() {
    let that = this;
    that.batch = that.batch + 20;
    this.pages = Array.apply(null, {length: Math.ceil(this.items.length / this.$.grid.pageSize)}).map(function(item, index) {
        return index + 1 + that.batch;
      });
   let subResult = [];

 
   async function grabIt(skip, limit, max) {
     let result = await that.db.find({
         selector: { 
           municipality: { $gte: null }
         },
         limit: limit,
         skip: skip
     });

     let sResult = subResult.concat(result.docs);
     subResult = sResult;

     max = max - limit;
 
     //if (limit => result.docs.length) {
     if (limit <= max) {
         grabIt(skip + 20, 20, max);
     } else {
        //that.maintableitems = subResult;
        that.items = subResult;
     }
   }
 
   grabIt(1 * that.batch * 20, 20, 100);
  }


  _prev() {
    this.page = Math.max(0, this.page - 1);
  }

  _itemsChanged(items, page) {
    if (items === undefined || page === undefined) {
      return;
    }

    if (!this.pages) {
      this.pages = Array.apply(null, {length: Math.ceil(items.length / this.$.grid.pageSize)}).map(function(item, index) {
        return index + 1;
      });
    }

    var start = page * this.$.grid.pageSize;
    var end = (page + 1) * this.$.grid.pageSize;

    // console.log(this.$.grid);
    // console.log(items.slice(start, end));
    //WITH PAGING
    //this.$.grid.items = items.slice(start, end);
    //console.log(this.$.grid.items);



    //WITHOUT PAGING
    this.$.grid.items = items;

  }

  _isEqualTo(title, string) {
        return title == string;
    }


//   _maintableitemsChanged() {
//       console.log("_maintableitemsChanged");
//       console.log(this.maintableitems);
//   }

    _brokertableitemsChanged() {
        // console.log("_brokertableitemsChanged");
        // console.log(this.brokertableitems);
    }


    _municipalitytableitemsChanged() {
        // console.log("_municipalitytableitemsChanged");
        // console.log(this.municipalitytableitems);
    }



    _contractdatetableitemsChanged() {
        // console.log("_contractdatetableitemsChanged");
        // console.log(this.contractdatetableitems);
    }


    _buildyeartableitemsChanged() {
        // console.log("_municipalitytableitemsChanged");
        // console.log(this.buildyeartableitems);
    }






    arr_diff(a1, a2) {

        var a = [], diff = [];

        for (var i = 0; i < a1.length; i++) {
            a[a1[i]] = true;
        }

        for (var i = 0; i < a2.length; i++) {
            if (a[a2[i]]) {
                delete a[a2[i]];
            } else {
                a[a2[i]] = true;
            }
        }

        for (var k in a) {
            diff.push(k);
        }

        return diff;
    }


  static get template() {
    return html`

	<style include = "style-element-grid">

.hide {
  position: absolute;

  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;

  white-space: nowrap;

  clip-path: inset(100%);
  clip: rect(0 0 0 0);
  overflow: hidden;
}

        .wrapper {
            display: grid;
            grid-template-columns: 1fr 1440px 1fr;
            background: linear-gradient(to bottom, #1954A6 100px,#1954A6 0vh,#2170de 300vh);
            background-attachment: fixed;
            min-height: 100vh;
        }

        .left {
            grid-column: 1;
        }

        .container {
            grid-column: 2;
        }



        .right {
            grid-column: 3;
        }

        @media only screen and (max-width: 1440px) {
            .wrapper {
            display: grid;
            grid-template-columns: 0px 1fr 0px;
            }

            .left {
                grid-column: 1;
            }

            .container {
                grid-column: 2;
            }

            .right {
                grid-column: 3;
            }
        }

        .header {
            padding-top: 30px;
            padding-bottom: 0px;
        }

        .main {
            padding-top: 200px;
            padding-bottom: 0px;
        }





        .mainrightpaddingtop {
            padding-top: 240px;
        }

        .headline {
            font-family: var(--parmaco-font-family);
            font-size: var(--parmaco-font-size-xxxl);
            font-weight: var(--parmaco-font-weight-normal);
            color: var(--parmaco-base-color-100pct);
            padding-bottom: 10px;
        }

        .headline-big {
            font-family: var(--parmaco-font-family);
            font-size: var(--parmaco-font-size-xxxxl);
            font-weight: var(--parmaco-font-weight-normal);
            color: var(--parmaco-base-color-100pct);
            padding-bottom: 60px;
            padding-top: 20px;
        }

        .ingress {
            font-family: var(--parmaco-font-family);
            font-size: var(--parmaco-font-size-m);
            font-weight: var(--parmaco-font-weight-normal);
            color: var(--parmaco-base-color-100pct);
        }




        .categoryinputsection {
            padding-top: 130px;
        }

        .categoryinputsection-headline {
            padding-top: 32px;
            font-family: var(--parmaco-font-family);
            font-size: var(--parmaco-font-size-xl);
            color: var(--parmaco-base-color-100pct);
        }
        .categoryinputsection-content {
        }

        .categoryinputsection-content--withchartbottom {
            grid-template-rows: auto 350px;
        }

        .categoryinputsection-content--withcharttop {
            grid-template-rows: 350px auto;
        }

        .categoryinputsection-content-text{
            padding-top: 33px;
            font-family: var(--parmaco-font-family);
            font-size: var(--parmaco-font-size-s);
            font-weight: var(--parmaco-font-weight-normal);
            color: var(--parmaco-base-color-100pct);
        }

        .categoryinputsection-content-text--top{
            padding-top: 33px;
            font-family: var(--parmaco-font-family);
            font-size: var(--parmaco-font-size-s);
            font-weight: var(--parmaco-font-weight-normal);
            color: var(--parmaco-base-color-100pct);
        }

        .categoryinputsection-content-inputbox {
        }

        .categoryinputsection-content-inputboxrow--bottom {
            padding-top: 33px;
        }

        .categoryinputsection-content-chart {
            padding-top: 33px;
        }

        .categoryinputsection-content-chart--bottom {
            padding-top: 33px;
        }

        .categoryinputsection-content-chart--top {
            padding-top: 33px;
        }




        .gridcontent-right {
            justify-self: end;
        }


        .rent-expansion-wrapper {
            padding-top: 150px;
        }
        
        .rent-detraction-wrapper {
            padding-top: 150px;
        }

        .chart-box-wrapper {
            padding-top: 150px;
        }
        

        .footer {
            padding-top: 450px;
            padding-bottom: 0px;
        }

        .maintablepaginator {
            font-family: var(--parmaco-font-family);
            font-size: var(--parmaco-font-size-m);
            font-color: var(--parmaco-base-color-100pct);
        }






        #pages {
            display: flex;
            flex-wrap: wrap;
            margin: 20px;
          }
    
          #pages > button {
            user-select: none;
            padding: 5px;
            margin: 0 5px;
            border-radius: 10%;
            border: 0;
            background: transparent;
            font: inherit;
            outline: none;
            cursor: pointer;
            font-family: var(--parmaco-font-family);
            font-size: var(--parmaco-font-size-m);
            color: var(--parmaco-base-color-100pct);
          }
    
          #pages > button:hover,
          #pages > button:focus {
            font-family: var(--parmaco-font-family);
            font-size: var(--parmaco-font-size-m);
            color: var(--parmaco-base-color-100pct);
            background-color: #ccc;
          }
    
          #pages > button[selected] {
            font-family: var(--parmaco-font-family);
            font-size: var(--parmaco-font-size-m);
            color: var(--parmaco-base-color-100pct);
            background-color: var(--parmaco-attention-color-100pct);
            
          }
        
  </style>




  
	
    <div class="wrapper">
    
        <div class="left"></div>
        <div class="grid-12 container">
            <whcg-header class="col1span12 header"></whcg-header>
            
            <div class="col1span12 grid-12 main">
                 <div class="col4span8 headline-big">
                        MÄKLARSTATISTIK
                    </div>
                <div class="col2span2 grid-2 sidemenu">
                    <whcg-lit-tab page="{{selectedpage}}"></whcg-lit-tab>
                </div>
                
                <div class="col4span8 grid-8 headlineandingress">
                        <iron-pages selected="{{selectedpage}}" attr-for-selected="key" fallback-selection="/" class="col1span8">
                            <div key="0">
                                <div class="headline">OM DATABASEN</div>
                                <div class="ingress">
                                    Pellentesque sit amet nisl odio. Duis erat libero, placerat vitae mi at, bibendum porta nisi. Proin fermentum mi et nibh sollicitudin, in interdum mauris molestie. Aliquam fermentum dolor pulvinar tempus blandit. Cras aliquam lectus ut dolor ornare aliquam. Curabitur lobortis ut nibh in sollicitudin. In viverra facilisis magna, a tempus lorem dictum at. Ut porta vehicula lacus, nec mollis libero rutrum id. Aliquam quis tristique risus.
                                </div>
                            </div>
                            <div key="1">
                                <div class="headline">ÄGA</div>
                                <div class="ingress">
                                    Pellentesque sit amet nisl odio. Duis erat libero, placerat vitae mi at, bibendum porta nisi. Proin fermentum mi et nibh sollicitudin, in interdum mauris molestie. Aliquam fermentum dolor pulvinar tempus blandit. Cras aliquam lectus ut dolor ornare aliquam. Curabitur lobortis ut nibh in sollicitudin. In viverra facilisis magna, a tempus lorem dictum at. Ut porta vehicula lacus, nec mollis libero rutrum id. Aliquam quis tristique risus.
                                </div>
                            </div>
                            <div key="2">
                                <div class="headline">HYRA</div>
                                <div class="ingress">
                                    Pellentesque sit amet nisl odio. Duis erat libero, placerat vitae mi at, bibendum porta nisi. Proin fermentum mi et nibh sollicitudin, in interdum mauris molestie. Aliquam fermentum dolor pulvinar tempus blandit. Cras aliquam lectus ut dolor ornare aliquam. Curabitur lobortis ut nibh in sollicitudin. In viverra facilisis magna, a tempus lorem dictum at. Ut porta vehicula lacus, nec mollis libero rutrum id. Aliquam quis tristique risus.
                                </div>
                            </div>
                            <div key="3">
                                <div class="headline">RESULTAT</div>
                                <div class="ingress">
                                    Pellentesque sit amet nisl odio. Duis erat libero, placerat vitae mi at, bibendum porta nisi. Proin fermentum mi et nibh sollicitudin, in interdum mauris molestie. Aliquam fermentum dolor pulvinar tempus blandit. Cras aliquam lectus ut dolor ornare aliquam. Curabitur lobortis ut nibh in sollicitudin. In viverra facilisis magna, a tempus lorem dictum at. Ut porta vehicula lacus, nec mollis libero rutrum id. Aliquam quis tristique risus.
                                </div>
                            </div>
                            <div key="/">
                                <div class="col1span8 headline">FALLBACK</div>
                            </div>
	                    </iron-pages>
                </div>


                <div id="commonsection" class="col1span12">
                <whcg-section-textlong-input-chart>
                <span slot="text">Pellentesque sit amet nisl odio. Duis erat libero, placerat vitae mi at, bibendum porta nisi. Proin fermentum mi et nibh sollicitudin, in interdum mauris molestie. Aliquam fermentum dolor pulvinar tempus blandit. Cras aliquam lectus ut dolor ornare aliquam. Curabitur lobortis ut nibh in sollicitudin. In viverra facilisis magna, a tempus lorem dictum at. Ut porta vehicula lacus, nec mollis libero rutrum id. Aliquam quis tristique risus.
                </span>
                <span slot="title">VALBARA KATEGORIER</span>
                <whcg-lit-grid slot="input1" items="{{brokertableitems}}" selecteditems="{{selectedbrokers}}">
                    <vaadin-grid-selection-column auto-select></vaadin-grid-selection-column>
                    <vaadin-grid-column width="140px" flex-grow="1" flex-shrink="1" resizable>
                        <template class="header"><vaadin-grid-sorter path="key">Mäklare</vaadin-grid-sorter></template>
                        <template>[[item.key]]</template>
                    </vaadin-grid-column>                    
                </whcg-lit-grid>
               <whcg-lit-grid slot="input2" items="{{municipalitytableitems}}" selecteditems="{{selectedmuni}}">
                    <vaadin-grid-selection-column auto-select></vaadin-grid-selection-column>
                    <vaadin-grid-column width="140px" flex-grow="1" flex-shrink="1" resizable>
                        <template class="header"><vaadin-grid-sorter path="key">Kommun</vaadin-grid-sorter></template>
                        <template>[[item.key]]</template>
                    </vaadin-grid-column>                    
                </whcg-lit-grid>
                <whcg-lit-grid slot="input3" items="{{buildyeartableitems}}" selecteditems="{{selectedbuildyear}}">
                    <vaadin-grid-selection-column auto-select></vaadin-grid-selection-column>
                    <vaadin-grid-column width="140px" flex-grow="1" flex-shrink="1" resizable>
                        <template class="header"><vaadin-grid-sorter path="key">Byggår</vaadin-grid-sorter></template>
                        <template>[[item.key]]</template>
                    </vaadin-grid-column>                    
                </whcg-lit-grid>
               <whcg-lit-grid slot="input4" items="{{contractdatetableitems}}" selecteditems="{{selectedcontractdate}}">
                    <vaadin-grid-selection-column auto-select></vaadin-grid-selection-column>
                    <vaadin-grid-column width="140px" flex-grow="1" flex-shrink="1" resizable>
                        <template class="header"><vaadin-grid-sorter path="key">Kontraktsdatum</vaadin-grid-sorter></template>
                        <template>[[item.key]]</template>
                    </vaadin-grid-column>                    
                </whcg-lit-grid>
            </whcg-section-textlong-input-chart>

                    <whcg-section-wide-chartlong>
                        <span slot="title">TABELL</span>
                        <span slot="text">Pellentesque sit amet nisl odio. Duis erat libero, placerat vitae mi at, bibendum porta nisi. Proin fermentum mi et nibh sollicitudin, in interdum mauris molestie. Aliquam fermentum dolor pulvinar tempus blandit. Cras aliquam lectus ut dolor ornare aliquam. Curabitur lobortis ut nibh in sollicitudin. In viverra facilisis magna, a tempus lorem dictum at. Ut porta vehicula lacus, nec mollis libero rutrum id. Aliquam quis tristique risus.
                        </span>
                        <whcg-lit-grid  id="grid" slot="chart" selecteditems="{{selectedmain}}" page-size="20" height-by-rows tableheight="1000">
                            <vaadin-grid-selection-column auto-select></vaadin-grid-selection-column>
                            <vaadin-grid-column width="60px" flex-grow="0">
                                <template class="header">#</template>
                                <template>[[index]]</template>
                            </vaadin-grid-column>
                            <vaadin-grid-column width="140px" flex-grow="1" flex-shrink="1" resizable>
                                <template class="header"><vaadin-grid-sorter path="raw_real_estate_company_name">Mäklare</vaadin-grid-sorter></template>
                                <template>[[item.raw_real_estate_company_name]]</template>
                            </vaadin-grid-column>
                            <vaadin-grid-column width="60px" flex-grow="1" flex-shrink="1" resizable>
                                <template class="header"><vaadin-grid-sorter path="municipality">Kommun</vaadin-grid-sorter></template>
                                <template>[[item.municipality]]</template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="10px" flex-grow="1" flex-shrink="1" resizable>
                                <template class="header"><vaadin-grid-sorter path="build_year">Byggår</vaadin-grid-sorter></template>
                                <template>[[item.build_year]]</template>
                            </vaadin-grid-column>

                            <vaadin-grid-column width="60px" flex-grow="1" flex-shrink="1" resizable>
                                <template class="header"><vaadin-grid-sorter path="formatted_address">Adress</vaadin-grid-sorter></template>
                                <template>[[item.formatted_address]]</template>
                            </vaadin-grid-column>
                            <vaadin-grid-column width="60px" flex-grow="1" flex-shrink="1" resizable>
                                <template class="header"><vaadin-grid-sorter path="type_of_housing">Hustyp</vaadin-grid-sorter></template>
                                <template>[[item.type_of_housing]]</template>
                            </vaadin-grid-column>
                            <vaadin-grid-column width="60px" flex-grow="1" flex-shrink="1" resizable>
                                <template class="header"><vaadin-grid-sorter path="contract_date">Kontraktsdatum</vaadin-grid-sorter></template>
                                <template>[[item.contract_date]]</template>
                            </vaadin-grid-column>
                            <vaadin-grid-column width="60px" flex-grow="1" flex-shrink="1" resizable>
                                <template class="header"><vaadin-grid-sorter path="contract_price">Köpeskilling</vaadin-grid-sorter></template>
                                <template>[[item.contract_price]]</template>
                            </vaadin-grid-column>                             
                        </whcg-lit-grid>
                        <!--
                        <div class="maintablepaginator" id="pages" slot="pages">
                            <template is="dom-if" if="{{showPrev}}">
                            <button on-click="_prevBatch">&lt;&lt;</button>
                            </template>
                            <button on-click="_prev">&lt;</button>
                            <template is="dom-repeat" items="[[pages]]">
                            <button on-click="_select" selected$="[[_isSelected(page, item)]]">[[item]]</button>
                            </template>
                            <button on-click="_next">&gt;</button>
                            <button on-click="_nextBatch">&gt;&gt;</button>
                        </div>
                        -->
                    </whcg-section-wide-chartlong>









                    <whcg-section-textlong-input-chart>

                </whcg-section-textlong-input-chart>
                </div>
        </div>
        <div class="right"></div>
    </div>
    `;
  }


async _selectedbuildyearChanged() {
    let result = await this._selectedAnyChanged(this.arrIdsBuildyearOld, this.arrBuildyearOld, 'build_year', this.selectedbuildyear); 
    this.arrIdsBuildyearOld = result[1].slice();
    this.arrBuildyearOld = result[0].slice();
    this.items = result[2].slice();  
}

async _selectedmuniChanged() {
    let result = await this._selectedAnyChanged(this.arrIdsMuniOld, this.arrMunicipalityOld, 'municipality', this.selectedmuni); 
    this.arrIdsMuniOld = result[1].slice();
    this.arrMunicipalityOld = result[0].slice();
    this.items = result[2].slice();  
}

async _selectedbrokersChanged() {
    let result = await this._selectedAnyChanged(this.arrIdsBrokersOld, this.arrBrokersOld, 'raw_real_estate_company_name', this.selectedbrokers);
    this.arrIdsBrokersOld = result[1].slice();
    this.arrBrokersOld = result[0].slice();
    this.items = result[2].slice();
}

async _selectedcontractdateChanged() {
    let result = await this._selectedAnyChanged(this.arrIdsContractdateOld, this.arrContractdateOld, 'contract_date', this.selectedcontractdate);
    this.arrIdsContractdateOld = result[1].slice();
    this.arrContractdateOld = result[0].slice();
    this.items = result[2].slice();
}

async getMunicipalities(skip, limit, max) {

    const fillTable = (e) => {
        this.municipalitytableitems = e.data.tableitems;
        if (e.data.rows.length > 0 && max > 0) {
            this.getMunicipalities(skip + limit, limit, max - limit);
        } 
    };

    this.muniWorker.postMessage({'skip': skip, 'limit': limit, 'tableitems': this.municipalitytableitems});
    this.muniWorker.onmessage = fillTable;    
};


async getBrokers(skip, limit, max) {

    const fillTable = (e) => {
        this.brokertableitems = e.data.tableitems;
        if (e.data.rows.length > 0 && max > 0) {
            this.getBrokers(skip + limit, limit, max - limit);
        } 
    };

    this.brokerWorker.postMessage({'skip': skip, 'limit': limit, 'tableitems': this.brokertableitems});
    this.brokerWorker.onmessage = fillTable;
};


async getBuildyear(skip, limit, max) {

    const fillTable = (e) => {
        this.buildyeartableitems = e.data.tableitems;
        if (e.data.rows.length > 0 && max > 0) {
            this.getBuildyear(skip + limit, limit, max - limit);
        } 
    };

    this.buildyearWorker.postMessage({'skip': skip, 'limit': limit, 'tableitems': this.buildyeartableitems});
    this.buildyearWorker.onmessage = fillTable;
};


async getContractdate(skip, limit, max) {

    const fillTable = (e) => {
        this.contractdatetableitems = e.data.tableitems;
        if (e.data.rows.length > 0 && max > 0) {
            this.getContractdate(skip + limit, limit, max - limit);
        } 
    };

    this.contractdateWorker.postMessage({'skip': skip, 'limit': limit, 'tableitems': this.contractdatetableitems});
    this.contractdateWorker.onmessage = fillTable;
};




async _selectedAnyChanged(idsOld, arrOld, key, selectedNames) {

    let newIds = [];
    let newArr = [];

    if (selectedNames.length) {
        let news = await this.grabColumnSelection(selectedNames, newIds, newArr, key);

        let myArr = await this._selectedColumnChanged(idsOld, arrOld, news.ids, news.arr);

        return myArr;

    } else {
        let myArr = await this._selectedColumnChanged(idsOld, arrOld, [], []);
        return myArr;
    }
}





async grabColumnSelected(name, skip, limit, max, newIds, newArr, key) {
    let selector = {};
    selector[key] = { $eq: name };

    let result = await this.db.find({
        selector: selector,
        limit: limit,
        skip: skip
    });

    if (result.docs.length) {
        result.docs.forEach(arr => {
            newArr.push(arr);
        });

        newIds = newArr.map(item => {
            return item.id;
        });
    } 
    
    max = max - limit;
  
    if (max > 0) {
        return this.grabColumnSelected(name, skip + 1000, 1000, max, newIds, newArr, key);
    } else {
        return {'ids': newIds, 'arr': newArr};
    }
};

async grabColumnSelection(names, newIds, newArr, key) {
    let news = await this.grabColumnSelected(names[0].key, 0, 1000, names[0].value, newIds, newArr, key);

    let slicedNames = names.slice(1);

    if (slicedNames.length > 0) {
        return this.grabColumnSelection(slicedNames, news.ids, news.arr, key);
    } else {
        return {'arr': news.arr, 'ids': news.ids}
    }


}







_selectedColumnChanged(selectedColumnsIdOld, selectedColumnsArrOld, newIds, newArr) {

    let newArrName = newArr;
    let newArrIdsName = newIds;

    if (newArrIdsName.length > selectedColumnsIdOld.length) {

        var subArr = newArrName.filter(newArrNameItem => {
            let test = true;
            selectedColumnsArrOld.forEach(arrNameItem => {
                if (arrNameItem.id === newArrNameItem.id) {
                    test = false;
                }
            });
            return test;
        });

        //SUBARR SKA TESTAS MOT LISTAN OCH LÄGGAS TILL OM ID INTE REDAN FINNS

        let addThese = subArr.filter(subArrItem => {
            let test = true;
            this.totalList.forEach(totalListItem => {
                if (subArrItem.id === totalListItem.id) {
                    test = false;
                }
            });
            return test;
        });

        this.totalList.push(...addThese);

    } else {

        let listToRemove = selectedColumnsArrOld.filter(arrNameItem => {
            let test = true;
            newArrName.forEach(newArrNameItem => {
                if (newArrNameItem.id === arrNameItem.id) {
                    test = false;
                }
            });
            return test;
        });

        //SUBARR SKA TESTAS MOT LISTAN OCH TAS BORT OM ID INTE REDAN FINNS
        let listAfterRemoval = this.totalList.filter(totalListItem => {
            let test = true;
            listToRemove.forEach(listToRemoveItem => {
                if (listToRemoveItem.id === totalListItem.id) {
                    test = false;
                }
            });
            return test;
        });
        this.totalList = listAfterRemoval.slice();
        
        
    }

    selectedColumnsArrOld = newArrName;

    selectedColumnsIdOld = newArrIdsName;

    let newTotalList = this.totalList;

    return [selectedColumnsArrOld, selectedColumnsIdOld, newTotalList];

}

  connectedCallback() {
      super.connectedCallback();


      this.getMunicipalities(0, 1000, 10000);
      this.getBrokers(0, 1000, 10000);
      this.getBuildyear(0, 1000, 10000);
      this.getContractdate(0, 1000, 10000);


  }
}

window.customElements.define("whcg-app", WhcgApp);

export { WhcgApp };



    //   let subResult = [];

    //   let that = this;

    //   async function grabIt(skip, limit, max) {
    //     let result = await that.db.find({
    //         selector: { 
    //           //municipality: { $gte: null }
    //            raw_real_estate_company_name: { $gte: "a" },
    //            municipality: { $gte: null },
    //            build_year: { $gte: "1955" }
    //         },
    //         limit: limit,
    //         skip: skip
    //     });

    //     let sResult = subResult.concat(result.docs);
    //     subResult = sResult;
    //     //that.maintableitems = subResult;
        

    //     max = max - limit;

    //     //if (limit => result.docs.length) {
    //     if (limit <= max) {
    //         grabIt(skip + 20, 20, max);
    //     } else {
    //         that.items = subResult;
    //     }
    //   }

    //   //grabIt(0, 20, 100);




    // this.db.query('my_index8/by_contractdate', {
    //     startkey: '1',
    //     reduce: true,
    //     group: true,
    // }).then(function (res) {

    //     let rows = res.rows;

    //     that.contractdatetableitems = rows;
    // }).catch(function (err) {
    //     console.log(err);
    // });




    // this.db.query('my_index8/by_name', {
    //     startkey: 'A',
    //     reduce: true,
    //     group: true,
    // }).then(function (res) {
      


    //     let rows = res.rows;

    //     that.brokertableitems = rows;
    // }).catch(function (err) {
    //     console.log(err);
    // });




    // this.db.query('my_index8/by_buildyear', {
    //     startkey: '1',
    //     reduce: true,
    //     group: true,
    // }).then(function (res) {

    //     let rows = res.rows;

    //     that.buildyeartableitems = rows;
    // }).catch(function (err) {
    //     console.log(err);
    // });


    // _selectedmuniChangedOld() {

    //     let selectedNames = this.selectedmuni;
    //     let names = selectedNames.map(name => {
    //         return name.key;
    //     });
    
    //     if (names.length) {
    //         Promise.all(names.map(col => {
    //             return this.db.find({
    //                 selector: {
    //                     // raw_real_estate_company_name: { $gte: "a" },
    //                     municipality: { $eq: col }
    //                     // build_year: { $gte: "1955" }
    //                 },
    //                 limit: 10
    //             });
    //         })
    //         ).then((res) => {
    //             let myArr = this._selectedColumnChanged(this.arrIdsMuniOld, this.arrMunicipalityOld, res);
    //             this.arrIdsMuniOld = myArr[1];
    //             this.arrMunicipalityOld = myArr[0];
    //         });
    //     } else {
    //         let myArr = this._selectedColumnChanged(this.arrIdsMuniOld, this.arrMunicipalityOld, []);
    //         this.arrIdsMuniOld = myArr[1];
    //         this.arrMunicipalityOld = myArr[0];
    //     }
    // }



      



      


      


    //   this.db.find({
    //       //selector: { raw_real_estate_company_name: { $gte: "a" } },
    //       //selector: { municipality: { $eq: "NACKA" } },
    //       // selector: {
    //       //   municipality: {$or: [
    //       //     { $eq: 'STOCKHOLM' },
    //       //     { $eq: 'NACKA' }
    //       //   ]}
    //       // },
    //       selector: { 
    //         // raw_real_estate_company_name: { $gte: "a" },
    //         municipality: { $gte: null }
    //         // build_year: { $gte: "1955" }
    //       },
    //       limit: 10,
    //   }).then(function (result) {
    //       console.log('result.docs');
    //       console.log(result.docs);
    //       console.log('result.docs');
    //       console.log(result.docs.length);
    //       let sResult = subResult.concat(result.docs);
    //       subResult = sResult;
    //       console.log('subResult');
    //       console.log(subResult);
    //       that.maintableitems = result.docs;
    //   }).then(function () {
    //     that.db.find({
    //         //selector: { raw_real_estate_company_name: { $gte: "a" } },
    //         //selector: { municipality: { $eq: "NACKA" } },
    //         // selector: {
    //         //   municipality: {$or: [
    //         //     { $eq: 'STOCKHOLM' },
    //         //     { $eq: 'NACKA' }
    //         //   ]}
    //         // },
    //         selector: { 
    //           // raw_real_estate_company_name: { $gte: "a" },
    //           municipality: { $gte: null }
    //           // build_year: { $gte: "1955" }
    //         },
    //         limit: 10,
    //         skip: 10
    //     }).then(function (result) {
    //         console.log('result.docs');
    //         console.log(result.docs);
    //         console.log('result.docs');
    //         console.log(result.docs.length);
    //         let sResult = subResult.concat(result.docs);
    //         subResult = sResult;
    //         that.maintableitems = subResult;
    //     });
    // }).catch(function (err) {
    //       console.log('err');
    //   });



    //             this.arrBrokersOld = myArr[0];

    // _selectedbrokersChangedNew() {

    //     let selectedNames = this.selectedmuni;
    //     let names = selectedNames.map(name => {
    //         return name.key;
    //     });
    
    //     if (names.length) {
    //         this.grabNames(names)
    //     } else {
    //         let myArr = this._selectedColumnChanged(this.arrIdsMuniOld, this.arrMunicipalityOld, []);
    //         this.arrIdsMuniOld = myArr[1];
    //         this.arrMunicipalityOld = myArr[0];
    //     }
    // }



    // _selectedbrokersChanged() {

    //     let selectedNames = this.selectedbrokers;

    //     let names = selectedNames.map(name => {
    //         return name.key;
    //     });

    //     if (names.length) {
    //         Promise.all(names.map(col => {
    //             return this.db.find({
    //                 selector: {
    //                     // raw_real_estate_company_name: { $gte: "a" },
    //                     raw_real_estate_company_name: { $eq: col }
    //                     // build_year: { $gte: "1955" }
    //                 },
    //                 limit: 1000
    //             });
    //         }
    //         )
    //         ).then((res) => {
    //             let myArr = this._selectedColumnChanged(this.arrIdsBrokersOld, this.arrBrokersOld, res);
    //             this.arrIdsBrokersOld = myArr[1];
    //             this.arrBrokersOld = myArr[0];
    //         });
    //     } else {
    //         let myArr = this._selectedColumnChanged(this.arrIdsBrokersOld, this.arrBrokersOld, []);
    //         this.arrIdsBrokersOld = myArr[1];
    //         this.arrBrokersOld = myArr[0];
    //     }
    // }

    




    // _selectedmainChanged() {
    //     console.log("_selectedmainChanged");
    //     console.log(this.selectedmain);
    // }



    // async _selectedmuniChangedX() {
//     let selectedNames = this.selectedmuni;
//     let names = selectedNames.map(name => {
//         return name.key;
//     });

//     let newIds = [];
//     let newArr = [];

//     if (names.length) {
//         let news = await this.grabColumnSelection(selectedNames, newIds, newArr);

//         let myArr = await this._selectedColumnChanged(this.arrIdsMuniOld, this.arrMunicipalityOld, news.ids, news.arr);
//         this.arrIdsMuniOld = myArr[1];
//         this.arrMunicipalityOld = myArr[0];
//         let newSelection = myArr[2].slice();
//         this.items = newSelection;

//     } else {
//         let myArr = await this._selectedColumnChanged(this.arrIdsMuniOld, this.arrMunicipalityOld, [], []);
//         this.arrIdsMuniOld = myArr[1];
//         this.arrMunicipalityOld = myArr[0];
//         let newSelection = myArr[2].slice();
//         this.items = newSelection;
//     }
// }
